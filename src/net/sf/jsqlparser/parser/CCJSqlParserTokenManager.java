/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/*
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2014 JSQLParser
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */

package net.sf.jsqlparser.parser;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.merge.*;
import java.util.*;

public class CCJSqlParserTokenManager implements CCJSqlParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffdfffffffffe0L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 136;
            return 23;
         }
         if ((active2 & 0x801000000000L) != 0L)
            return 12;
         if ((active2 & 0x80000L) != 0L)
            return 1;
         if ((active2 & 0x2000000000000L) != 0L)
            return 37;
         if ((active2 & 0x2000000000L) != 0L)
            return 15;
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 136;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0x6fb3ffffff7bf000L) != 0L || (active1 & 0xfebbfffffffbfdffL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 1;
            }
            return 23;
         }
         if ((active0 & 0x904c000000840fe0L) != 0L || (active1 & 0x144000000040200L) != 0L)
            return 23;
         return -1;
      case 2:
         if ((active0 & 0x2800002ff000L) != 0L || (active1 & 0x20840080000L) != 0L)
            return 23;
         if ((active0 & 0xffffd7ffffd00000L) != 0L || (active1 & 0xfebffdf7bff7ffffL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 2;
            }
            return 23;
         }
         return -1;
      case 3:
         if ((active0 & 0xffffd50044100000L) != 0L || (active1 & 0xec993df2bfffdbffL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 3;
            }
            return 23;
         }
         if ((active0 & 0x2ffbbc00000L) != 0L || (active1 & 0x1226c00d00002400L) != 0L)
            return 23;
         return -1;
      case 4:
         if ((active0 & 0xfe00000000100000L) != 0L || (active1 & 0xc8b8bde09affcbfdL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 136;
               jjmatchedPos = 4;
            }
            return 23;
         }
         if ((active0 & 0x1ffd50044000000L) != 0L || (active1 & 0x2401001325001002L) != 0L)
            return 23;
         return -1;
      case 5:
         if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x38180080000807L) != 0L)
            return 23;
         if ((active0 & 0x100000L) != 0L || (active1 & 0xcc80a5e01affc3f8L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 5;
            return 23;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000L) != 0L || (active1 & 0xc00081000a898078L) != 0L)
            return 23;
         if ((active1 & 0xc8024e010764380L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 6;
            return 23;
         }
         return -1;
      case 7:
         if ((active1 & 0xc8004e000724200L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 7;
            return 23;
         }
         if ((active1 & 0x200010040180L) != 0L || (active2 & 0x1L) != 0L)
            return 23;
         return -1;
      case 8:
         if ((active1 & 0x400000000320000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 8;
            return 23;
         }
         if ((active1 & 0x88004e000404200L) != 0L)
            return 23;
         return -1;
      case 9:
         if ((active1 & 0x300000L) != 0L)
            return 23;
         if ((active1 & 0x400000000020000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 9;
            return 23;
         }
         return -1;
      case 10:
         if ((active1 & 0x400000000020000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 10;
            return 23;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x188000000L);
      case 37:
         return jjStopAtPos(0, 166);
      case 38:
         return jjStopAtPos(0, 163);
      case 40:
         return jjStopAtPos(0, 144);
      case 41:
         return jjStopAtPos(0, 145);
      case 42:
         return jjStopAtPos(0, 146);
      case 43:
         return jjStopAtPos(0, 149);
      case 44:
         return jjStopAtPos(0, 143);
      case 45:
         jjmatchedKind = 164;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 147, 1);
      case 47:
         return jjStartNfaWithStates_0(0, 165, 15);
      case 58:
         jjmatchedKind = 173;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L);
      case 59:
         return jjStopAtPos(0, 141);
      case 60:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6000000L);
      case 61:
         return jjStopAtPos(0, 142);
      case 62:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 63:
         return jjStopAtPos(0, 148);
      case 64:
         jjmatchedKind = 174;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000L);
      case 91:
         return jjStartNfaWithStates_0(0, 177, 37);
      case 93:
         return jjStopAtPos(0, 178);
      case 94:
         return jjStopAtPos(0, 167);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x47020L, 0x60000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000000040L, 0x80000000040L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000240000000L, 0x8008010082500400L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000008400080L, 0x100L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000001000200000L, 0xc00000008804L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x84080000000L, 0x1008200080000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x400000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800c000004800300L, 0x40000000040200L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x200000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000022000000L, 0x400010000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000021000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1010000L, 0x2000108000010L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1060000100000c00L, 0x104000000002000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000100000L, 0x4004004008L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x80161800200020L, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800002000020000L, 0x1800000011000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10800080000L, 0x80L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x10202000000001L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100020000000000L, 0x800002L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x48400000000L, 0x20000000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10d0000000000L);
      case 124:
         jjmatchedKind = 162;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L);
      case 125:
         return jjStopAtPos(0, 169);
      case 126:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         break;
      case 58:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         break;
      case 61:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         break;
      case 62:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 175);
         break;
      case 64:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100010200000000L, active1, 0xc000001400834412L, active2, 0L);
      case 68:
      case 100:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa02000020528000L, active1, 0x2a83140000200060L, active2, 0x1L);
      case 70:
      case 102:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 118, 23);
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x1000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c00000000L, active1, 0x400000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x90128002000000L, active1, 0x20080210001100L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004001000L, active1, 0x20000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800c800000a06000L, active1, 0x14202000040200L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 23);
         return jjMoveStringLiteralDfa2_0(active0, 0x82010090000L, active1, 0x802888a180000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x1L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4410000c8000000L, active1, 0x400004004000088L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 23);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000040000L, active1, 0x4L, active2, 0L);
      case 84:
      case 116:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L, active2, 0x80000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20004001000000L, active1, 0x10100000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0xc00000008800L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 23);
         break;
      case 124:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 126:
         if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1400000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x2010000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000008000804L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 23);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 23);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x44000000000000L, active1, 0x1L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400060d00000000L, active1, 0x200c04000002000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000020000000L, active1, 0x200000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000000000000L, active1, 0x100000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000c00014000000L, active1, 0x1010000004000008L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 23);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0xb00004001000000L, active1, 0x4208180000002L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10002000000000L, active1, 0x8000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStopAtPos(2, 176);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x81002101000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000c8000000L, active1, 0x400000000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000020L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0x2000010200884000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 171);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001200400000L, active1, 0x8000000400000500L, active2, 0x1L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 23);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x20008000800000L, active1, 0x4021040020078250L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 23);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x800080000000005L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 23);
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0xc001804000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 23);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 23);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 23);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x8a6c000000000000L, active1, 0x1000202f0a00L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000001000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x20000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4012000000000000L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x8110000020L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000008L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 23);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 23);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 23);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x2000080L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000L, active1, 0x202004000000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 23);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 23);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 124, 23);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x10001408000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000040000000L, active1, 0x200100000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 23);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 23);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 23);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4100L, active2, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000000000000L, active1, 0x480040080001012L, active2, 0L);
      case 87:
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8800000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000408028L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x8000080L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 23);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 23);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 23);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 23);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000100000L, active1, 0x14002000042L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x28000010884100L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 23);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000804L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 23);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 23);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 23);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 23);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x8800c0000270210L, active2, 0x1L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 23);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 23);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 23);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 23);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 23);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 23);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 23);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x2600000000000000L, active1, 0x100001L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10802000000000L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000010090L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2408020L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000004000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 23);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 23);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 23);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 23);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000200040L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000080000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L, active2, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 23);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x52010800100L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 23);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100008L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 23);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000200L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 23);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 23);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 23);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 23);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000004000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x160000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000100L, active2, 0x1L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 126, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 23);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 23);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 23);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 127, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000200L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8004c000004000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 23);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 23);
         break;
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 23);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 23);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 23);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 23);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000400080L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x200200L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 23);
         break;
      case 69:
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 23);
         return jjMoveStringLiteralDfa8_0(active1, 0x2000400000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x100000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 23);
         return jjMoveStringLiteralDfa8_0(active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x4c000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0xc00000000004000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 23);
         break;
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 23);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 128, 23);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active1, 0x80000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 23);
         break;
      case 69:
      case 101:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 23);
         return jjMoveStringLiteralDfa9_0(active1, 0x200000L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 23);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 23);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 23);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000L);
      case 78:
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 23);
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000100000L);
      case 82:
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 86, 23);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 23);
         break;
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000000000L);
      case 83:
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 23);
         break;
      case 84:
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 23);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 23);
         break;
      case 84:
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 122, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 39)
                     jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 130)
                        kind = 130;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(31);
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 36)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39 && kind > 132)
                     kind = 132;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar != 45)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 42)
                     jjCheckNAddStates(11, 13);
                  break;
               case 18:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 19:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 47 && kind > 135)
                     kind = 135;
                  break;
               case 21:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 22:
                  if (curChar != 36)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(23);
                  break;
               case 24:
               case 25:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 10);
                  break;
               case 27:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 29:
                  if (curChar == 39 && kind > 139)
                     kind = 139;
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 34 && kind > 140)
                     kind = 140;
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 37:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAddStates(0, 6);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 0);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar != 46)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjCheckNAdd(51);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 23:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(23);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 96)
                     jjCheckNAdd(34);
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 9:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(10);
                  break;
               case 13:
                  if (kind > 134)
                     kind = 134;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  jjCheckNAddTwoStates(19, 17);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 28:
                  jjAddStates(7, 10);
                  break;
               case 31:
                  jjAddStates(20, 21);
                  break;
               case 33:
                  if (curChar == 96)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 96 && kind > 140)
                     kind = 140;
                  break;
               case 36:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
               case 38:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 93 && kind > 140)
                     kind = 140;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(23);
                  break;
               case 8:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(23);
                  break;
               case 13:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 10);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 21);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 15);
                  break;
               case 37:
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(38, 39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 0, 42, 43, 47, 48, 51, 26, 27, 28, 29, 17, 18, 20, 34, 35, 
   3, 4, 6, 7, 31, 32, 45, 46, 49, 50, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\73", "\75", "\54", "\50", "\51", "\52", "\56", "\77", "\53", "\76", 
"\74", "\76\75", "\74\75", "\74\76", "\41\75", "\100\100", "\176", "\176\52", 
"\41\176", "\41\176\52", "\174\174", "\174", "\46", "\55", "\57", "\45", "\136", null, 
"\175", null, null, "\72\72", "\72", "\100", "\55\76", null, "\133", "\135", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0x7fffffffff917L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0xc0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0xc0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[52];
private final int[] jjstateSet = new int[104];
protected char curChar;
public CCJSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CCJSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
